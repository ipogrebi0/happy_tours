library(readr)
library(dplyr)
library(woeBinning)
#install.packages("woeBinning")
#install.packages("radiant")


######################### functions above this line ##################

impute <- function(x,y) {
  x[is.na(x)]<-y
  x
}

mode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}

######################### importing data ###############################3


tour <- read.csv("C:\\Users\\pogrebivskyi\\OneDrive\\Villanova\\Data Mining\\Project\\modeling_data.csv", header=TRUE)
drop.vars <- c(grep("ID$|Trip_no|Grp_Size_Cat|^(Poor|Fair|Good|Excellent)", names(tour)))
tour2<-tour %>%
  mutate("Hotel_3orAbove" = Good_Hotels + Excellent_Hotels,
         "Meals_3orAbove" = Good_Meals + Excellent_Meals,
         "GUSS_3orAbove" = Good_GUSS + Excellent_GUSS,
         "Optionals_3orAbove" = Good_Optionals + Excellent_Optionals,
         "Bus_3orAbove" = Good_Buses + Excellent_Buses) %>%
  select(-drop.vars, -contains("Gateway")) %>%
  select(1:31, 59:63, everything()) 

# All changes to Faith's variables
tour2 <- mutate_if(tour2, is.character, as.factor)

binning <- woe.binning(as.data.frame(tour2), 'Book_12Mo', 
                       c('State', 'TourCode', 'Tour_Region', 'SourceType'),
                       min.perc.total=0.05, min.perc.class=0.01, stop.limit=0.1)

tour.bin <- woe.binning.deploy(as.data.frame(tour2), binning, add.woe.or.dum.var = 'woe')

levels(tour.bin$State.binned) <- c("NY+CA+misc", "Other", "PA+FL", NA)
levels(tour.bin$TourCode.binned) <- c("Other", "VFR+MIT+misc", "VIB", NA)
levels(tour.bin$Tour_Region.binned) <- c("FS+MD+CNE+AM+misc", "Other", "BI+IT+EU+EC", NA)
levels(tour.bin$SourceType.binned) <- c("Other", "Internet+Referral", "Old Src IDs+misc", NA)

tour.xf <- tour.bin %>%
  # change all character variables into factors
  mutate_if(is.character, as.factor) %>%
  mutate(Book_12Mo = as.factor(Book_12Mo)) %>%
  # fix typo in tourPriceCat
  mutate(TourPriceCat = as.factor(if_else(as.character(TourPriceCat) == "More than 50", 
                                          "More than 5000", as.character(TourPriceCat))),
         # turn Past_Trips into numeric variable
         Past_Trips = ifelse(as.character(Past_Trips) == "0 Trips", 0,
                             ifelse(as.character(Past_Trips) == "1 Trip", 1,
                                    ifelse(as.character(Past_Trips) == "2 Trips", 2,
                                           ifelse(as.character(Past_Trips) == "3 Trips", 3,
                                                  ifelse(as.character(Past_Trips) == "4 Trips", 4, NA))))),
         Book_Months_num = ifelse(as.numeric(Book_Months) == 1, 4,
                                  ifelse(as.numeric(Book_Months) == 4, 5,
                                         ifelse(as.numeric(Book_Months) == 5, 1, as.numeric(Book_Months)))),
         Age_num = ifelse(as.numeric(Age) == 1, 2,
                          ifelse(as.numeric(Age) == 2, 3,
                                 ifelse(as.numeric(Age) == 3, 4,
                                        ifelse(as.numeric(Age) == 4, 5,
                                               ifelse(as.numeric(Age) == 5, 6,
                                                      ifelse(as.numeric(Age) == 6, 7,
                                                             ifelse(as.numeric(Age) == 7, 8,
                                                                    ifelse(as.numeric(Age) == 8, NA,
                                                                           ifelse(as.numeric(Age) == 9, 9,
                                                                                  ifelse(as.numeric(Age) == 10, 1, NA)))))))))),
         DB_Enter_Months_num = ifelse(as.numeric(DB_Enter_Months) == 1, 2,
                                      ifelse(as.numeric(DB_Enter_Months) == 2, 3,
                                             ifelse(as.numeric(DB_Enter_Months) == 3, 4,
                                                    ifelse(as.numeric(DB_Enter_Months) == 4, 1, NA)))),
         TourPriceCat_num = ifelse(as.numeric(TourPriceCat) == 1, 2,
                                   ifelse(as.numeric(TourPriceCat) == 2, 3,
                                          ifelse(as.numeric(TourPriceCat) == 3, 4,
                                                 ifelse(as.numeric(TourPriceCat) == 4, 5,
                                                        ifelse(as.numeric(TourPriceCat) == 5, 6,
                                                               ifelse(as.numeric(TourPriceCat) == 6, 7,
                                                                      ifelse(as.numeric(TourPriceCat) == 7, 8,
                                                                             ifelse(as.numeric(TourPriceCat) == 8, 1, NA)))))))))%>%
  # if email is missing, make it unavailable
  mutate(Email = as.factor(if_else(is.na(as.character(Email)), "Unavailable", as.character(Email)))) %>%
  # drop unwanted variables for model
  select(-starts_with("woe."), -TourCode, -Tour_Region, -SourceType, -State,
         -Book_Months, -Age, -DB_Enter_Months, -TourPriceCat, -Promo_Disc)



##creating Optionals_Bin to deal with right-skewed Optionals #####
tour.xf<-mutate(tour.xf, Optionals_Bin = ifelse(Optionals %in% 0, "1",
                                                ifelse(Optionals %in% 1:5, "2",
                                                       ifelse(Optionals %in% 6:9, "3",
                                                              ifelse(Optionals %in% 9:12, "4", "5")))))



############## Alex Cleaning ##########

#Entering NA's instead of 0's when there is no meaning associated with 0
need_NA<-c("Recommend_GAT", "TravelAgain", "Groups_Interest", "Reference", "Overall_Impression", "Pre_Departure", "Flight_Itin")
tour.xf[need_NA] <-sapply(tour.xf[need_NA], function(x) gsub("0", NA, x))

#Revaluing certain columns from 1's and 2's to 0's and 1's

revalue_cols <- c("Recommend_GAT", "TravelAgain", "Groups_Interest", "Reference")
library(plyr)
tour.xf[revalue_cols] <- sapply(tour.xf[revalue_cols], revalue, replace= c("1"="0", "2"="1"))

#Making sure that the right columns are factors and intervals
factor_cols<- c("Recommend_GAT", "TravelAgain", "Groups_Interest", "Reference", "Overall_Impression", "Pre_Departure", "Flight_Itin", "TD_Overall", "Extension", "Insurance", "FltGty", "Complaint_Event", "Voucher_Event", "Book_12Mo")
numeric_cols<- c("Optionals", "Eval_Contact_Days")
tour.xf[numeric_cols] <- sapply(tour.xf[numeric_cols], as.numeric)
tour.xf[factor_cols] <- sapply(tour.xf[factor_cols], as.factor)
tour.xf <- tour.xf %>%
  mutate_if(is.character, as.factor)%>%
  select(-("Optionals"))

##Imputing values for Recommend_GAT, TravelAgain, Groups_Interest, Reference, Overall_Impression, Pre_Departure, Flight_Itin, TD_Overall

tour.imp <- tour.xf
tour_impute <- c("Recommend_GAT", "TravelAgain", "Groups_Interest", "Reference", "Overall_Impression", "Pre_Departure", "Flight_Itin", "TD_Overall")

Mode <- sapply(tour.imp[tour_impute], mode)
tour.imp[tour_impute]<-as.data.frame(mapply(impute, x=tour.imp[tour_impute], y=Mode))

#Creating a missing value flag
tour.imp[c("Recommend_GAT.NA", "TravelAgain.NA", "Groups_Interest.NA", "Reference.NA", "Overall_Impression.NA", "Pre_Departure.NA", "Flight_Itin.NA", "TD_Overall.NA")] <- ifelse(is.na(tour[c("Recommend_GAT", "TravelAgain", "Groups_Interest", "Reference", "Overall_Impression", "Pre_Departure", "Flight_Itin", "TD_Overall")]), 1, 0)

###################### tour.james #############################

tour.imp ->james
james$FY <- as.factor(james$FY)
james$Tour_Season <- as.factor(james$Tour_Season)
james$Start_Day <- as.factor(james$Start_Day)
james$End_Day <- as.factor(james$End_Day)
james$Book_12Mo <- as.factor(james$Book_12Mo)
james$Domestic_Depart_Time<-as.character(james$Domestic_Depart_Time)
james$Intr_Arrival_Time<-as.character(james$Intr_Arrival_Time)
james$Intr_Depart_Time<-as.character(james$Intr_Depart_Time)
james$Domestic_Arrival_Time<-as.character(james$Domestic_Arrival_Time)


#Entering "00:00:00" for missing times
need_NA<-c("Domestic_Depart_Time","Intr_Arrival_Time","Intr_Depart_Time","Domestic_Arrival_Time")
james[need_NA] <-sapply(james[need_NA], function(x) gsub("^$","00:00:00", x))


# Transform time into period of a day. I use 4 periods of a day.
library(hms)
library(lubridate)
james2 <- james[c(grep("_Time$", names(james)))]
for (i in 1:4){
  james2[[i]] <- ifelse(as_hms(james2[[i]])>=as.hms("00:00:00") & as_hms(james2[[i]])<=as.hms("05:59:59"),"Night",
                        ifelse(as_hms(james2[[i]])>=as.hms("06:00:00") & as_hms(james2[[i]])<=as.hms("11:59:59"),"Morning",
                               ifelse(as_hms(james2[[i]])>=as.hms("12:00:00") & as_hms(james2[[i]])<=as.hms("17:59:59"),"Afternoon","Evening")))
}

james %>% select(-grep("_Time$", names(james))) %>% cbind(james2) -> james

# Break down TourDate into Date, Month, Year variables for better analysis
james %>% mutate(
  TourDay = day(as.POSIXlt(TourDate, format="%m/%d/%Y")),
  TourMonth = month(as.POSIXlt(TourDate, format="%m/%d/%Y")),
  TourYear = year(as.POSIXlt(TourDate, format="%m/%d/%Y"))
) %>% 
  # Drop FY because we already have TourYear, and drop TourDate
  select(-TourDate, -FY) -> james

# Transform tour day into tour week (week of a month), still a numerical variable 
james %>% mutate(
  "TourWeek" = ifelse(james$TourDay < 8, 1,
                      ifelse(james$TourDay < 15, 2,
                             ifelse(james$TourDay < 22, 3, 4)))) %>% 
  select(-TourDay) -> james

# Fix missing/null values masked as "-1" in some variables.
james %>% mutate(
  "Outbound_Connections" = ifelse(Outbound_Connections < 0 & Outbound_Connect_Time_Mins_2 > 0, 2,
                                  ifelse(Outbound_Connections < 0 & Outbound_Connect_Time_Mins_1 > 0, 1,
                                         ifelse(Outbound_Connections >= 0, Outbound_Connections, 0
                                         )))) -> james
james %>% mutate(
  "Return_Connections" = ifelse(Return_Connections < 0 & Return_Connect_Time_Mins_2 > 0, 2,
                                ifelse(Return_Connections < 0 & Return_Connect_Time_Mins_1 > 0, 1,
                                       ifelse(Return_Connections >= 0, Return_Connections, 0
                                       )))) -> james

# Force negative values into NA/0 values depending on "Connections" variables to ensure logical imputation later
james$Outbound_Connect_Time_Mins_1 = ifelse(james$Outbound_Connections == 0, 0, 
                                            ifelse(james$Outbound_Connect_Time_Mins_1 <= 0, NA, james$Outbound_Connect_Time_Mins_1))
james$Outbound_Connect_Time_Mins_2 = ifelse(james$Outbound_Connections %in% c(0, 1), 0, 
                                            ifelse(james$Outbound_Connect_Time_Mins_2 <= 0, NA, james$Outbound_Connect_Time_Mins_2))
james$Return_Connect_Time_Mins_1 = ifelse(james$Return_Connections == 0, 0, 
                                          ifelse(james$Return_Connect_Time_Mins_1 <= 0, NA, james$Return_Connect_Time_Mins_1))
james$Return_Connect_Time_Mins_2 = ifelse(james$Return_Connections %in% c(0, 1), 0, 
                                          ifelse(james$Outbound_Connect_Time_Mins_2 <= 0, NA, james$Outbound_Connect_Time_Mins_2))

# Force extremely high values into NAs for later imputation of "more reasonable" values
james %>% select(contains("_Mins_")) %>% 
  sapply(function(x) quantile(x, .99, na.rm=T)) %>% max() -> cutoff.mins # Use 99th percentile as threshold
james %>% select(contains("_Mins_")) %>%
  sapply(function(x) ifelse(x > cutoff.mins, NA, x)) %>% 
  cbind(select(james, -contains("_Mins_"))) %>% 
  select(5:8, 18, 16:17, 12, 15, 9, 1:2, 14, 13, 10, 3:4, 11)

# Variables with missing values
na.vars <- names(james)[sapply(james, function(x) any(is.na(x)))]
na.vars  # ==> Variables indicating time of departing/arriving at domestic/international airports have missing values.

# numeric impute: By mean #

means <- function(x) { mean(x, na.rm = TRUE) }
Means <- sapply(james[na.vars], means)

james[na.vars]<-as.data.frame(mapply(impute, x=james[na.vars], y=Means))


#Creating a missing value flag
james[c("Outbound_Connect_Time_Mins_2.NA","Return_Connect_Time_Mins_1.NA","Return_Connect_Time_Mins_2.NA","Age_num.NA")] <- ifelse(is.na(tour.imp[c("Outbound_Connect_Time_Mins_2","Return_Connect_Time_Mins_1","Return_Connect_Time_Mins_2","Age_num")]), 1, 0)

james->tour.clean.imp
